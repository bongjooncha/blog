{
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<h1>BGD(Batch Gradient Descent)</h1>"
    },
    {
      "cell_type": "code",
      "source": "import numpy as np"
    },
    {
      "cell_type": "markdown",
      "source": "\uc2dd\uc740 y = 3x + 4 \uc5d0\uc11c \uc57d\uac04\uc758 \ub178\uc774\uc988\ub97c \ucd94\uac00..."
    },
    {
      "cell_type": "code",
      "source": "# \uac00\uc0c1\uc758 \ub370\uc774\ud130 \uc0dd\uc131\nnp.random.seed(42)\nX = 2 * np.random.rand(100, 1)\ny = 4 + 3 * X + np.random.randn(100, 1)"
    },
    {
      "cell_type": "markdown",
      "source": "ones(100,1): 1\ub85c \ucc44\uc6cc\uc9c4 100 x 1 \ubc30\uc5f4 \uc0dd\uc131, c_[ ]\ub294 c_\ubc30\uc5f4 \uc548\uc758 \ub450 \ubc30\uc5f4\uc744 \ub354\ud568. (100 x 2) \ubc30\uc5f4\uc774 \ub428..."
    },
    {
      "cell_type": "code",
      "source": "X_b = np.c_[np.ones((100, 1)), X]"
    },
    {
      "cell_type": "markdown",
      "source": "| lr | n_iterations | m |\n|-----|--------------|---|\n|\ud559\uc2b5\ub960| \ubc18\ubcf5\ud69f\uc218(\uba87 \ubc88\uc758 epoch\uc774 \uc9c4\ud589\ub420 \uac83\uc778\uc9c0 \uc758\ubbf8) | \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub41c \uc0d8\ud50c \uc218|"
    },
    {
      "cell_type": "code",
      "source": "# \ucd08\uae30\uac12 \uc124\uc815\nlr = 0.1\nn_iterations = 1000\nm = 100"
    },
    {
      "cell_type": "markdown",
      "source": "theta_bgd\ub294 bgd\uac00 \ucc3e\uace0\uc790\ud558\ub294 \ubcc0\uc218\uc774\ub2e4. \ud604\uc7ac 2\uac1c\uc758 \ubcc0\uc218\ub97c \ucc3e\uc544\uc57c \ud558\uae30\uc5d0 \ub79c\ub364\ud55c \uc22b\uc790\ub85c \ub9cc\ub4e4\uc5b4\uc9c0 2 x 1 \ubc30\uc5f4\uc744 \uc0dd\uc131\ud55c\ub2e4."
    },
    {
      "cell_type": "code",
      "source": "# Batch Gradient Descent (BGD) \uad6c\ud604\ntheta_bgd = np.random.randn(2, 1)\ntheta_bgd_path = []"
    },
    {
      "cell_type": "markdown",
      "source": "![mse \ud568\uc218](../../../../img/study/optimizer/bgd/mse_func_diff.png)\n\n \uc774 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ud55c \uc190\uc2e4\ud568\uc218(loss funciton)\uc740 MSE\uc774\ub2e4. MSE\ub294 \uc2e4\uc81c\uac12\uacfc \uc608\uce21\uce58 theta\ub97c \ub123\uace0 \uacc4\uc0b0\ud55c \uac12\uc758 \ucc28\ub97c \uc81c\uacf1\ud55c \ud6c4 \ud3c9\uade0\uc744 \ub0b4\ub294 \uc190\uc2e4\ud568\uc218\uc774\ub2e4..."
    },
    {
      "cell_type": "code",
      "source": "for iteration in range(n_iterations):  # 1\ud68c \ubc18\ubcf5 \ub2f9 \uc2dc\ud589\ub418\ub294 \uacfc\uc815\n    gradients = 2/m * X_b.T.dot(X_b.dot(theta_bgd) - y)\n    theta_bgd = theta_bgd - lr * gradients\n    theta_bgd_path.append(theta_bgd)\ntheta_bgd_path = np.array(theta_bgd_path)\nprint(theta_bgd_path)"
    }
  ],
  "metadata": {},
  "nbformat": 4,
  "nbformat_minor": 4
}
